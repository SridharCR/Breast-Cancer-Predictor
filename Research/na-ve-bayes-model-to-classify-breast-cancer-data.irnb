{"cells":[{"metadata":{"_uuid":"09bb48c426369b5ab61a61922f79f60c8924a396"},"cell_type":"markdown","source":"**This aim of this notebook is to build a Na誰ve Bayes model and classify benign and malignant using 10-fold cross validation.  **"},{"metadata":{"_uuid":"598cf501daf135ad13cc2d67480a82c25569bd94","_execution_state":"idle","trusted":true,"_kg_hide-output":true},"cell_type":"code","source":"# Loading the caret library to build the Na誰ve Bayes model\nlibrary(\"caret\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"61127cf65a80d426c31b7600230d6d76075b796c"},"cell_type":"code","source":"# Loading the data\ndf <- read.table('../input/breast-cancer-wisconsin.data.txt', header = TRUE, sep = \",\", na.strings = 'null')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"52b8087aab793a2f29deeeab62c6739fd4ca3dca"},"cell_type":"code","source":"head(df)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"82f9a054aee2dffe9d899ad8903a2928344c7e7b"},"cell_type":"markdown","source":"**Preprocessing the data**"},{"metadata":{"trusted":true,"_uuid":"0b5ac9f8a3790e99a72a5688dfec04cc51b2b1c7"},"cell_type":"code","source":"# Dropping the id number as it is not required in the analysis\ndf <- (df[,-1])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1a5a3793996262ef7ba83c9edf525ccd1fb69a3d"},"cell_type":"code","source":"# Naming the columns\ncolnames(df) = c(\"Clump.Thickness\", \"Uniformity.of.Cell.Size\", \"Uniformity.of.Cell.Shape\", \"Marginal.Adhesion\", \"Single.Epithelial.Cell.Size\", \"Bare.Nuclei\", \"Bland.Chromatin\", \"Normal.Nucleoli\", \"Mitoses\", \"Class\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"dee7c6e2213f98847a1221492bf5f48b261c2965"},"cell_type":"code","source":"# When importing the data to a data.frame,\n# it gets converted to a factor if the entire column is not numeric and \n# \"Bare.Nuclei\" has some missing values which is represented as \"?\" So with that in mind,\n# it will have to be converted to character and then to numeric.\nstr(df)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"68eb9433a2ba9dde7b980dd5605abe7cca042f56"},"cell_type":"code","source":"# Counting the number of rows\nnrow(df)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4724c132c9282d90bd2d256877599d36734547d2"},"cell_type":"code","source":"# Converting \"Bare.Nuclei\" into character and then into numeric\ndf$Bare.Nuclei = as.numeric(as.character(df$Bare.Nuclei))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"11fc0fb3101850099aa8e86c355a82b73d5d315f"},"cell_type":"code","source":"# The above line turned \"?\" in the \"Bare.Nuclei\" column into the NAs\n# Hence missing values needs to be checked\nsum(is.na(df))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"cb2d664e378f811a5e16038d9df21c099c4f4cf6"},"cell_type":"code","source":"# Omiting the rows which has missing values\ndf <- na.omit(df)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"77862dd0a887605a4cb8e76aa601e7e9801c987c"},"cell_type":"code","source":"# Checking if there no missing values\nsum(is.na(df))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"958ce1c6572d6e8a6ff056880e03942f33add81a"},"cell_type":"code","source":"# Converting \"Bare.Nuclei\" into integer just like other attributes\ndf$Bare.Nuclei<- as.integer(df$Bare.Nuclei)\nstr(df)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8dbc0f1cdfc318faf14498705cc836a75f76e959"},"cell_type":"code","source":"# Factorizing the class attribute and replacing it with the new factorized class attribute\nfactorizedClass <- as.factor(df$Class)\ndf <- data.frame(df, factorizedClass)\ndf <- df[,-10]\nhead(df)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"b83ff0afac3c5f70a306dc25fbcedb6c0600a9a8"},"cell_type":"markdown","source":"**Building Na誰ve Bayes Model**"},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"c0e0045beb5126275ac07c6f684da1c9a2067340"},"cell_type":"code","source":"# Trainign the Na誰ve Bayes model using 10 fold cross validation\nnbModel <- train(df[,-10], df$factorizedClass, \"nb\", trControl = trainControl(method = \"cv\", number = 10))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2f36edbcc71ce4ba20d2b287c81adb9916998d98"},"cell_type":"code","source":"# Checking the model\nnbModel","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"trusted":true,"scrolled":true,"_uuid":"0ea4bd7b0d3700594473b1d32fda5808bc9c82db"},"cell_type":"code","source":"# Predicting the model\nnbPrediction <- predict(nbModel, df[,-10])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1cd1c2735dba2de9e095c7c316c5e29f3d8da93e"},"cell_type":"code","source":"# Generating the confusion matrix\nconfusionMatrix <- confusionMatrix(nbPrediction, df$factorizedClass)\nconfusionMatrix","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"20a8ba4f15333284e203c8abc95a11531eb5950a"},"cell_type":"markdown","source":"A confusion matrix is a special contingency table used to evaluate the predictive accuracy of a classifier. Predicted classes are listed in rows & actual classes in columns, w/ counts of respective cases in each cell.\n\nThere are two predicted class: Benign and Malignant. \nThe \"2\" in confusion matrix represents as benign and \"4\" as malignant\n\nWe can infer from the above calculation that the specificity for the model is 94% refers that there are proportion of people without the disease who will have a negative result.\n\nSensitivity value is 97% which means the predicted values were positive when compared to actual positive class.\n\nThe accuracy for this model is 96% which means that 96% of the time, the model classified the class benign or malignant correctly.\n"},{"metadata":{"trusted":true,"_uuid":"6a1b702c68989b342cad68cc081f522313d37fb4"},"cell_type":"code","source":"# Calculation the misclassification rate\nmisclassificationErr <- mean(nbPrediction != df$factorizedClass)\nmisclassificationErr","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"b6b86a0a4094118d7a39012d9f038e9abd8d56c5"},"cell_type":"markdown","source":"The above model classified the patients with either benign or malignant 3% incorrectly."},{"metadata":{"_uuid":"0d7618e2d9eb0754f6e32913d01f060c087b2253"},"cell_type":"markdown","source":"**Discretising the data**"},{"metadata":{"trusted":true,"_uuid":"c227f83254413118b45855c5fdac32d632a1d8cf"},"cell_type":"code","source":"# Loading the required library\nlibrary(infotheo)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1c3fe38fa8fb0c2ee2040653e4998bff8c639bca"},"cell_type":"code","source":"# Discritising the data\nef.data <-discretize(df, disc=\"equalfreq\", nbins=3 )","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"56a7637e3216d5b436a515c74865177f03db5f7e"},"cell_type":"code","source":"# Factorising the class and replacing old with new factorised attribute\nclassFactor <- as.factor(ef.data$factorizedClass)\nef.data <- data.frame(ef.data, classFactor)\nef.data <- ef.data[,-10]\nhead(ef.data)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"a548ca5b3c44acc86281a6c937732aa699272e14"},"cell_type":"code","source":"# Building the new model with discretized data\ndiscretizedModel <- train(ef.data[,-10], ef.data$classFactor, \"nb\", trControl = trainControl(method = \"cv\", number = 10))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b979f5d5a37851629ea56fc95dc00c18fc1b4c53"},"cell_type":"code","source":"discretizedModel","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c9b6be462eb22bdd71e556e64d04be5838ff594a"},"cell_type":"code","source":"discretizedPrediction <- predict(discretizedModel, ef.data[,-10])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"87cc342923c002a16a1b97c0a9b59957c6132d46"},"cell_type":"code","source":"discretizedConfusionMatrix <- confusionMatrix(discretizedPrediction, ef.data$classFactor)\ndiscretizedConfusionMatrix","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ad064f75e8f62170f868836f6734f88f4e9ea097"},"cell_type":"markdown","source":"The accuracy increased to 97% after discretising the data which is improved from the previous model."},{"metadata":{"trusted":true,"_uuid":"a6a173a940c6f8ca4121157a917b95a5059a9d3d"},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}